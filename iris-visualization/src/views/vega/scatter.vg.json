{
    "$schema": "https://vega.github.io/schema/vega/v5.json",
    "description": "An interactive scatter plot example supporting pan and zoom.",
    "padding": {
        "top": 20,
        "left": 40,
        "bottom": 40,
        "right": 80
    },
    "autosize": "none",
    "signals": [
        {
            "name": "binRange",
            "value": null
        },
        {
            "name": "sliderRange",
            "value": null
        },
        {
            "name": "margin",
            "value": 20
        },
        {
            "name": "hover",
            "on": [
                {
                    "events": "*:mouseover",
                    "encode": "hover"
                },
                {
                    "events": "*:mouseout",
                    "encode": "leave"
                },
                {
                    "events": "*:mousedown",
                    "encode": "select"
                },
                {
                    "events": "*:mouseup",
                    "encode": "release"
                }
            ]
        },
        {
            "name": "xoffset",
            "update": "-(height + padding.bottom)"
        },
        {
            "name": "yoffset",
            "update": "-(width + padding.left)"
        },
        {
            "name": "xrange",
            "update": "[0, width]"
        },
        {
            "name": "yrange",
            "update": "[height, 0]"
        },
        {
            "name": "down",
            "value": null,
            "on": [
                {
                    "events": "touchend",
                    "update": "null"
                },
                {
                    "events": "mousedown, touchstart",
                    "update": "xy()"
                }
            ]
        },
        {
            "name": "xcur",
            "value": null,
            "on": [
                {
                    "events": "mousedown, touchstart, touchend",
                    "update": "slice(xdom)"
                }
            ]
        },
        {
            "name": "ycur",
            "value": null,
            "on": [
                {
                    "events": "mousedown, touchstart, touchend",
                    "update": "slice(ydom)"
                }
            ]
        },
        {
            "name": "delta",
            "value": [
                0,
                0
            ],
            "on": [
                {
                    "events": [
                        {
                            "source": "window",
                            "type": "mousemove",
                            "consume": true,
                            "between": [
                                {
                                    "type": "mousedown"
                                },
                                {
                                    "source": "window",
                                    "type": "mouseup"
                                }
                            ]
                        },
                        {
                            "type": "touchmove",
                            "consume": true,
                            "filter": "event.touches.length === 1"
                        }
                    ],
                    "update": "down ? [down[0]-x(), y()-down[1]] : [0,0]"
                }
            ]
        },
        {
            "name": "anchor",
            "value": [
                0,
                0
            ],
            "on": [
                {
                    "events": "wheel",
                    "update": "[invert('xscale', x()), invert('yscale', y())]"
                },
                {
                    "events": {
                        "type": "touchstart",
                        "filter": "event.touches.length===2"
                    },
                    "update": "[(xdom[0] + xdom[1]) / 2, (ydom[0] + ydom[1]) / 2]"
                }
            ]
        },
        {
            "name": "zoom",
            "value": 0.5,
            "on": [
                {
                    "events": "wheel!",
                    "force": true,
                    "update": "pow(1.001, event.deltaY * pow(16, event.deltaMode))"
                },
                {
                    "events": {
                        "signal": "dist2"
                    },
                    "force": true,
                    "update": "dist1 / dist2"
                }
            ]
        },
        {
            "name": "dist1",
            "value": 0,
            "on": [
                {
                    "events": {
                        "type": "touchstart",
                        "filter": "event.touches.length===2"
                    },
                    "update": "pinchDistance(event)"
                },
                {
                    "events": {
                        "signal": "dist2"
                    },
                    "update": "dist2"
                }
            ]
        },
        {
            "name": "dist2",
            "value": 0,
            "on": [
                {
                    "events": {
                        "type": "touchmove",
                        "consume": true,
                        "filter": "event.touches.length===2"
                    },
                    "update": "pinchDistance(event)"
                }
            ]
        },
        {
            "name": "xdom",
            "update": "slice(xext)",
            "on": [
                {
                    "events": {
                        "signal": "delta"
                    },
                    "update": "[xcur[0] + span(xcur) * delta[0] / width, xcur[1] + span(xcur) * delta[0] / width]"
                },
                {
                    "events": {
                        "signal": "zoom"
                    },
                    "update": "[anchor[0] + (xdom[0] - anchor[0]) * zoom, anchor[0] + (xdom[1] - anchor[0]) * zoom]"
                }
            ]
        },
        {
            "name": "ydom",
            "update": "slice(yext)",
            "on": [
                {
                    "events": {
                        "signal": "delta"
                    },
                    "update": "[ycur[0] + span(ycur) * delta[1] / height, ycur[1] + span(ycur) * delta[1] / height]"
                },
                {
                    "events": {
                        "signal": "zoom"
                    },
                    "update": "[anchor[1] + (ydom[0] - anchor[1]) * zoom, anchor[1] + (ydom[1] - anchor[1]) * zoom]"
                }
            ]
        },
        {
            "name": "size",
            "update": "clamp(200 / span(xdom), 1, 1000)"
        },
        {
            "name": "zoomScale",
            "update": "span(xext) / span(xdom) * 100"
        }
    ],
    "data": [
        {
            "name": "irisData",
            "transform": [
                {
                    "type": "extent",
                    "field": "sepalLength",
                    "signal": "xext"
                },
                {
                    "type": "extent",
                    "field": "sepalWidth",
                    "signal": "yext"
                }
            ]
        }
    ],
    "scales": [
        {
            "name": "xscale",
            "zero": false,
            "domain": {
                "signal": "xdom"
            },
            "range": {
                "signal": "xrange"
            }
        },
        {
            "name": "yscale",
            "zero": false,
            "domain": {
                "signal": "ydom"
            },
            "range": {
                "signal": "yrange"
            }
        },
        {
            "name": "color",
            "type": "ordinal",
            "domain": {
                "data": "irisData",
                "field": "variety"
            },
            "range": {
                "scheme": "custom"
            }
        },
        {
            "name": "rangeScale",
            "domain": {
                "data": "irisData",
                "field": "petalLength"
            },
            "range": {
                "signal": "[0, width]"
            }
        }
    ],
    "axes": [
        {
            "scale": "xscale",
            "orient": "bottom",
            "title": "Sepal Length (cm)"
        },
        {
            "scale": "yscale",
            "orient": "left",
            "title": "Sepal Width (cm)"
        }
    ],
    "legends": [
        {
            "fill": "color",
            "title": "Variety",
            "offset": 0,
            "encode": {
                "symbols": {
                    "update": {
                        "fillOpacity": {
                            "value": 0.5
                        },
                        "stroke": {
                            "value": "transparent"
                        }
                    }
                }
            }
        }
    ],
    "marks": [
        {
            "type": "symbol",
            "from": {
                "data": "irisData"
            },
            "clip": true,
            "encode": {
                "enter": {
                    "fill": {
                        "scale": "color",
                        "field": "variety"
                    },
                    "stroke": {
                        "value": "black"
                    }
                },
                "update": {
                    "x": {
                        "scale": "xscale",
                        "field": "sepalLength"
                    },
                    "y": {
                        "scale": "yscale",
                        "field": "sepalWidth"
                    },
                    "size": {
                        "signal": "size"
                    },
                    "opacity": {
                        "signal": "sliderRange!=null && binRange!=null ? inrange(datum.petalLength, [invert('rangeScale', sliderRange[0]), invert('rangeScale', sliderRange[1])]) && inrange(datum.petalWidth, binRange) : (binRange!=null ? inrange(datum.petalWidth, binRange) : (sliderRange!=null ? inrange(datum.petalLength, [invert('rangeScale', sliderRange[0]), invert('rangeScale', sliderRange[1])]) : true))"
                    }
                }
            }
        }
    ]
}