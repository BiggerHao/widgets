{
    "$schema": "https://vega.github.io/schema/vega/v5.json",
    "description": "A basic range slider example.",
    "padding": 5,
    "data": [
        {
            "name": "irisData"
        }
    ],
    "signals": [
        {
            "name": "minL",
            "value": 0
        },
        {
            "name": "maxR",
            "update": "width"
        },
        {
            "name": "deltaL",
            "value": 0
        },
        {
            "name": "deltaR",
            "update": "width"
        },
        {
            "name": "drag",
            "value": {
                "dx": 0,
                "count": 0,
                "start": 0,
                "startValues": [
                    0,
                    0
                ],
                "limitL": false,
                "limitR": false
            }
        },
        {
            "name": "hover",
            "on": [
                {
                    "events": "rect:mouseover, arc:mouseover",
                    "encode": "select"
                }
            ]
        },
        {
            "name": "hoverOut",
            "on": [
                {
                    "events": "rect:mouseout, arc:mouseout",
                    "encode": "release"
                }
            ]
        },
        {
            "name": "arcUpdate",
            "on": [
                {
                    "events": "arc:mousedown",
                    "encode": "selectArc"
                }
            ]
        },
        {
            "name": "arcUpdateRelease",
            "on": [
                {
                    "events": "arc:mouseup",
                    "encode": "deselectArc"
                }
            ]
        }
    ],
    "scales": [
        {
            "name": "x",
            "domain": {
                "data": "irisData",
                "field": "petalLength"
            },
            "range": {
                "signal": "[0, width]"
            }
        }
    ],
    "axes": [
        {
            "scale": "x",
            "orient": "bottom",
            "offset": {
                "signal": "-40"
            },
            "encode": {
                "ticks": {
                  "enter": {
                    "stroke": {"value": "black"},
                    "strokeWidth": {"value": 1.5}
                  }
                }
            },
            "title": "Petal Length (cm)"
        }
    ],
    "marks": [
        {
            "type": "group",
            "name": "rectGroup",
            "signals": [
                {
                    "name": "deltaL",
                    "push": "outer",
                    "on": [
                        {
                            "events": "rect:dblclick",
                            "update": "(abs(x()-deltaR)>=abs(x()-deltaL)) ? x() : deltaL"
                        },
                        {
                            "events": [
                                {
                                    "source": "view",
                                    "type": "mousemove",
                                    "consume": true,
                                    "between": [
                                        {
                                            "source": "scope",
                                            "type": "mousedown"
                                        },
                                        {
                                            "source": "view",
                                            "type": "mouseup"
                                        }
                                    ]
                                },
                                {
                                    "type": "touchmove",
                                    "consume": true,
                                    "filter": "event.touches.length === 1"
                                }
                            ],
                            "update": "drag.limitL || drag.limitR ? deltaL : drag.dx + drag.startValues[0]"
                        }
                    ]
                },
                {
                    "name": "deltaR",
                    "push": "outer",
                    "on": [
                        {
                            "events": "rect:dblclick",
                            "update": "(abs(x()-deltaL)>=abs(x()-deltaR)) ? x() : deltaR"
                        },
                        {
                            "events": [
                                {
                                    "source": "view",
                                    "type": "mousemove",
                                    "consume": true,
                                    "between": [
                                        {
                                            "source": "scope",
                                            "type": "mousedown"
                                        },
                                        {
                                            "source": "view",
                                            "type": "mouseup"
                                        }
                                    ]
                                },
                                {
                                    "type": "touchmove",
                                    "consume": true,
                                    "filter": "event.touches.length === 1"
                                }
                            ],
                            "update": "drag.limitL || drag.limitR ? deltaR : drag.dx + drag.startValues[1]"
                        }
                    ]
                },
                {
                    "name": "drag",
                    "push": "outer",
                    "on": [
                        {
                            "events": [
                                {
                                    "source": "view",
                                    "type": "mousemove",
                                    "consume": true,
                                    "between": [
                                        {
                                            "source": "scope",
                                            "type": "mousedown"
                                        },
                                        {
                                            "source": "view",
                                            "type": "mouseup"
                                        }
                                    ]
                                },
                                {
                                    "type": "touchmove",
                                    "consume": true,
                                    "filter": "event.touches.length === 1"
                                }
                            ],
                            "update": "{count: drag.count+1, dx: drag.count == 0 ? 0 : x() - drag.start, start: drag.count == 0 ? x() : drag.start, startValues: drag.count == 0 ? [deltaL, deltaR] : drag.startValues, limitL: drag.dx!=0 ? drag.dx + drag.startValues[0] < minL || drag.dx + drag.startValues[1] < minL : false, limitR: drag.dx!=0 ? drag.dx + drag.startValues[0] > maxR || drag.dx + drag.startValues[1] > maxR : false }"
                        },
                        {
                            "events": "view:mouseup",
                            "update": "{count: 0, dx: 0, start: 0, startValues: [deltaL, deltaR], limitL: false, limitR: false}"
                        },
                        {
                            "events": "rect:dblclick",
                            "update": "{count: 0, dx: 0, start: 0, startValues: [deltaL, deltaR], limitL: false, limitR: false}"
                        }
                    ]
                }
            ],
            "marks": [
                {
                    "type": "rect",
                    "name": "line",
                    "encode": {
                        "enter": {
                            "fill": {
                                "value": "transparent"
                            },
                            "stroke": {
                                "value": "black"
                            }
                        },
                        "update": {
                            "x": {
                                "signal": "minL"
                            },
                            "x2": {
                                "signal": "maxR"
                            },
                            "height": {
                                "value": 10
                            },
                            "opacity": {
                                "value": 1
                            },
                            "fillOpacity": {
                                "value": 1
                            },
                            "strokeOpacity": {
                                "value": 1
                            }
                        },
                        "select": {
                            "fill": {
                                "value": "red"
                            },
                            "fillOpacity": {
                                "value": 0.5
                            }
                        },
                        "release": {
                            "fill": {
                                "value": "white"
                            },
                            "fillOpacity": {
                                "value": 1
                            }
                        }
                    }
                },
                {
                    "type": "rect",
                    "name": "selectedLine",
                    "encode": {
                        "enter": {
                            "fill": {
                                "value": "steelblue"
                            },
                            "stroke": {
                                "value": "black"
                            }
                        },
                        "update": {
                            "fill": {
                                "signal": "drag.count > 0 ? 'red' : 'steelblue'"
                            },
                            "x": {
                                "signal": "deltaL>=minL ? (deltaL<=maxR ? deltaL : maxR) : minL"
                            },
                            "x2": {
                                "signal": "deltaR>=minL ? (deltaR<=maxR ? deltaR : maxR) : minL"
                            },
                            "height": {
                                "value": 10
                            },
                            "strokeOpacity": {
                                "value": 1
                            }
                        },
                        "select": {
                            "fillOpacity": {
                                "value": 0.5
                            }
                        },
                        "release": {
                            "fillOpacity": {
                                "value": 1
                            }
                        }
                    }
                }
            ]
        },
        {
            "type": "group",
            "name": "rangeL",
            "signals": [
                {
                    "name": "deltaL",
                    "push": "outer",
                    "on": [
                        {
                            "events": [
                                {
                                    "source": "view",
                                    "type": "mousemove",
                                    "consume": true,
                                    "between": [
                                        {
                                            "source": "scope",
                                            "type": "mousedown"
                                        },
                                        {
                                            "source": "view",
                                            "type": "mouseup"
                                        }
                                    ]
                                },
                                {
                                    "type": "touchmove",
                                    "consume": true,
                                    "filter": "event.touches.length === 1"
                                }
                            ],
                            "update": "(x()<=maxR && x()>=minL) ? x() : deltaL "
                        }
                    ]
                }
            ],
            "marks": [
                {
                    "type": "arc",
                    "name": "leftArc",
                    "encode": {
                        "enter": {
                            "fill": {
                                "value": "white"
                            },
                            "stroke": {
                                "value": "black"
                            }
                        },
                        "update": {
                            "x": {
                                "signal": "deltaL>=minL ? (deltaL<=maxR ? deltaL : maxR) : minL"
                            },
                            "y": {
                                "value": 15
                            },
                            "startAngle": {
                                "value": -0.73
                            },
                            "endAngle": {
                                "value": 0.73
                            },
                            "outerRadius": {
                                "value": 20
                            },
                            "opacity": {
                                "value": 1
                            }
                        },
                        "select": {
                            "fillOpacity": {
                                "value": 0.5
                            }
                        },
                        "release": {
                            "fillOpacity": {
                                "value": 1
                            }
                        },
                        "selectArc": {
                            "fill": {
                                "value": "red"
                            }
                        },
                        "deselectArc": {
                            "fill": {
                                "value": "white"
                            }
                        }
                    }
                },
                {
                    "type": "text",
                    "encode": {
                        "enter": {
                            "fill": {
                                "value": "#000"
                            }
                        },
                        "update": {
                            "text": {
                                "signal": "deltaL>=minL ? (deltaL<=maxR ? round(invert('x', deltaL)) : round(invert('x', maxR))) : round(invert('x', minL))"
                            },
                            "opacity": {
                                "value": 1
                            },
                            "x": {
                                "signal": "deltaL>=minL ? (deltaL<=maxR ? deltaL - 5 : maxR -5) : minL -5"
                            },
                            "y": {
                                "signal": "30"
                            },
                            "fillOpacity": {
                                "value": 0
                            }
                        }
                    }
                }
            ]
        },
        {
            "type": "group",
            "name": "rangeR",
            "signals": [
                {
                    "name": "deltaR",
                    "push": "outer",
                    "on": [
                        {
                            "events": [
                                {
                                    "source": "view",
                                    "type": "mousemove",
                                    "consume": true,
                                    "between": [
                                        {
                                            "source": "scope",
                                            "type": "mousedown"
                                        },
                                        {
                                            "source": "view",
                                            "type": "mouseup"
                                        }
                                    ]
                                },
                                {
                                    "type": "touchmove",
                                    "consume": true,
                                    "filter": "event.touches.length === 1"
                                }
                            ],
                            "update": "(x()<=maxR && x()>=minL) ? x() : deltaR "
                        }
                    ]
                }
            ],
            "marks": [
                {
                    "type": "arc",
                    "name": "rightArc",
                    "encode": {
                        "enter": {
                            "fill": {
                                "value": "white"
                            },
                            "stroke": {
                                "value": "black"
                            }
                        },
                        "update": {
                            "x": {
                                "signal": "deltaR>=minL ? (deltaR<=maxR ? deltaR : maxR) : minL"
                            },
                            "y": {
                                "value": 15
                            },
                            "startAngle": {
                                "value": -0.73
                            },
                            "endAngle": {
                                "value": 0.73
                            },
                            "outerRadius": {
                                "value": 20
                            },
                            "opacity": {
                                "value": 1
                            }
                        },
                        "select": {
                            "fillOpacity": {
                                "value": 0.5
                            }
                        },
                        "selectArc": {
                            "fill": {
                                "value": "red"
                            }
                        },
                        "deselectArc": {
                            "fill": {
                                "value": "white"
                            }
                        },
                        "release": {
                            "fillOpacity": {
                                "value": 1
                            }
                        }
                    }
                },
                {
                    "type": "text",
                    "encode": {
                        "enter": {
                            "fill": {
                                "value": "#000"
                            }
                        },
                        "update": {
                            "text": {
                                "signal": "deltaR>=minL ? (deltaR<=maxR ? round(invert('x', deltaR)) : round(invert('x', maxR))) : round(invert('x', minL))"
                            },
                            "opacity": {
                                "value": 1
                            },
                            "x": {
                                "signal": "deltaR>=minL ? (deltaR<=maxR ? deltaR - 5 : maxR -5) : minL -5"
                            },
                            "y": {
                                "signal": "25"
                            },
                            "fillOpacity": {
                                "value": 0
                            }
                        }
                    }
                }
            ]
        },
        {
            "type": "text",
            "encode": {
                "enter": {
                    "fill": {
                        "value": "#000"
                    }
                },
                "update": {
                    "text": {
                        "value": "MAX"
                    },
                    "opacity": {
                        "value": 1
                    },
                    "x": {
                        "signal": "maxR + 20"
                    },
                    "y": {
                        "value": 8.5
                    }
                }
            }
        },
        {
            "type": "text",
            "encode": {
                "enter": {
                    "fill": {
                        "value": "#000"
                    }
                },
                "update": {
                    "text": {
                        "value": "MIN"
                    },
                    "opacity": {
                        "value": 1
                    },
                    "x": {
                        "signal": "minL - 40"
                    },
                    "y": {
                        "value": 8.5
                    }
                }
            }
        }
    ]
}